#!/usr/bin/perl

# Copyright (C) 2015 Genome Research Ltd.
# Author: Rob Davies <rmd@sanger.ac.uk>
#
# Redistribution and use in source and binary forms, with or without 
# modification, are permitted provided that the following conditions are met:
#
#  1. Redistributions of source code must retain the above copyright notice, 
# this list of conditions and the following disclaimer.
#
#  2. Redistributions in binary form must reproduce the above copyright notice,
# 
# this list of conditions and the following disclaimer in the documentation 
# and/or other materials provided with the distribution.
#
#  3. Neither the names Genome Research Ltd and Wellcome Trust Sanger
# Institute nor the names of its contributors may be used to endorse or promote
# products derived from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY GENOME RESEARCH LTD AND CONTRIBUTORS "AS IS" AND 
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED 
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE 
# DISCLAIMED. IN NO EVENT SHALL GENOME RESEARCH LTD OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


use strict;
use Time::HiRes qw(gettimeofday tv_interval usleep);
use POSIX ":sys_wait_h";
use Getopt::Long qw(:config require_order pass_through);

my $usage = "Usage:  $0 -out <outfile> <command> ...\n";

my $out;
my $interval = 1000;
GetOptions('out=s' => \$out, 'interval=i' => \$interval)
    || die $usage;
unless ($out) {
    die $usage;
}

my $done = 0;

$SIG{CHLD} = sub { $done = 1; };

my $t0 = [gettimeofday];

open(my $o, '>', $out) || die "Couldn't open $out: $!\n";

my $pid = fork();
unless ($pid) {
    exec(@ARGV) || die "Couldn't exec @ARGV: $!\n";
}
while (!$done) {
    usleep($interval);
    
    my %v;
    open(my $s, "<", "/proc/$pid/status")
	|| die "Couldn't open /proc/$pid/status : $!\n";
    while (<$s>) {
	if (/^Vm(Size|RSS|Data|Stk):\s+(\d+)\s+kB/) {
	    $v{$1} = $2;
	}
    }
    close($s) || die "Error reading /proc/$pid/status: $!\n";

    my $t = tv_interval($t0);
    printf { $o } ("%.6f %d %d %d %d\n",
		   $t, $v{Size}, $v{RSS}, $v{Data}, $v{Stk});
}

close($o) || die "Error writing to $out: $!\n";

my $res = waitpid($pid, 0);
if ($res < 0 || $?) { die "Error running @ARGV"; }
